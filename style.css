* {
  margin: 0;
  padding: 0;
  /* this is called a global reset */
}
/* this is uniwersal selectior that selects every item on the page */
body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #444;
}

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}
/* the decendent selector - it will pick all the p elements in the footer*/
/* footer p {
  font-size: 16px;
} */
/*  - long decendent selector
article header p {
  font-style: italic;
} */
/* this # is a selector for IDs */
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

/* ID is for one time use only, CLASS is for multiple use */
.related-autor {
  font-size: 18px;
  font-weight: bold;
  /* # is selector for id, . is a selector for class */
}

.related-list {
  list-style: none;
}

.main-header {
  background-color: #f7f7f7;
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
  /* box model will show us that whole height of the item is 120px due to padding 20+80+20 */
}

aside {
  background-color: #f7f7f7;
  border-top: 5px, solid, #1098ad;
  border-bottom: 5px, solid, #1098ad;
  /* this is a special kind of property - shorthand property - we can use one propetry to define few properties */
  padding-top: 50px;
  padding-bottom: 50px;
  width: 500px;
}

/* .first-li {
  font-weight: bold;
}  can do it like that manually but there is a better way*/
/* the pseudo class is activated by : and following with child element */

li:last-child {
  font-style: italic;
  margin-bottom: 0;
}

/* li:nth-child(2) {
  /* here we specify which child are we intersted in. We can use numbers but also words like: odd,even */
/* color: red; */
/* } */

/* article p:last-child {
  color: red;
} */

/* here I will be styling links */
/* link will target only href atribute */
a:link {
  color: #1098ad;
  text-decoration: none;
}
/* after clicking the link we can change it's color but this is not in practise */
a:visited {
  color: #1098ad;
}
/* this is pseudo class to action a change when we hover over the link */
a:hover {
  color: orange;
  font-weight: bold;
  text-decoration: underline, wavy, orange;
  /* this is another example of multiple properties described in one property */
}
/* this is styling for when we actually click */
a:active {
  background-color: black;
  font-style: italic;
}

nav a:link {
  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
  /* margin: 20px;
    padding: 20px;
  /* in that way you can change inline block element to block element */
  /* display: block; */
  /* we always style links in this order */
}

nav a:link:last-child {
  margin-right: 0;
}

/* devtools
!importand is the best but last resort, id is next, class and selector (hierarchy of the values)*/

/* resolving conflicts */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green;
}

a:link {
  color: #777;
  text-decoration: none;
}

a {
  color: red;
} */

nav {
  font-size: 18px;
  text-align: center;
}

.post-header {
  margin-bottom: 40px;
}

article {
  margin-bottom: 60px;
}

/* we use css to add measurments of html objects */
.post-image {
  width: 100%;
  /* using % to style - it will adjust the image to the parent container that it is in - 100% width gonna be 100% of parent element width */
  /* using % also allows item to always addapt when the browser window changes size */
  height: auto;
}

/* centering your page content - we close everything in box and specify width of the container - 2 add margins to the left and right */
.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}
/* absolute positioning - declaring items position out of normal flow of things */

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  bottom: 50px;
  right: 50px;

  /* due to positioning being absolute to the view point we need to create relative for positioning this - here body is relative */
}

/* pseudo elements don't exist in html but we can still style them in CSS )fist letters, in element type of thing*/
/* pseduo element is activeted by using :: */
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* + is adjecent sibiling selector (adjecent sibling is the next one in the element) */
/* h3 + p::first-line {
  color: red;
} */

/* before and after pseudoelements

After pseudoelement created the very last child of the selected element*/

h2 {
  position: relative;
}

h2::after {
  content: "TOP";
  /* always need to define content property - even with empty "" */
  background-color: yellow;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  /* all the pseudo elemenents are in line elements */
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* LAYOUTS */
/* Float - used in old code, can come accross it, don't use if not needed */

.author {
  /* padding-left: 80px; */
  margin-left: 20px;
  margin-top: 10px;
  float: left;
}

.Laura-img {
  float: left;
  margin-bottom: 10px;
}

h1 {
  float: left;
}

nav {
  float: right;
}
/* not a best way but the easiest to clear floats (so the container is not colapsed  */
/* .clear {
  clear: both;
} */

/* the clear fix  hack */
.clearfix::after {
  /* this will insert new element */
  clear: both;
  content: "";
  display: block;
}

article {
  width: 825px;
  float: left;
}

aside {
  width: 300px;
  float: right;
}

footer {
  clear: both;
}
